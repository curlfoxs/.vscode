var gulp = require('gulp'),
    _ = require('lodash'),
    fs = require('fs-extra'),
    execSync = require('child_process').execSync,
    http = require('http'),
    version = require('./plugin/ext/lib/version'),
    glob = require('glob'),
    request = require('request'),
    path = require('path');

const SENCHA_SDK_PATH = process.env['SENCHA_SDK_PATH'] || '/Users/mbrocato/Code/SDK';

var baseDir = process.cwd();

/**
 * Deletes build artifacts
 */
gulp.task('clean', function() {
    fs.removeSync('dist');
});

/**
 * Builds the binary using jxcore
 */
gulp.task('build', ['clean'], function(callback) {
    fs.mkdirsSync('dist');
    var buildCounter = process.env['TERN_BUILD_NUMBER'] || new Date().getTime().toString()
    updateVersionJs(buildCounter);
    var jxPath = process.env["JX_PATH"] || 'jx';
    execSync(`"${jxPath}" package bin/tern.js tern --native`);
    var exe = /^win/.test(process.platform) ? "tern.exe" : "tern";
    fs.move(exe, `dist/${exe}`, {clobber: true}, callback);
    fs.writeFileSync("dist/tern.version", `${version}.${buildCounter}`);
});

gulp.task('prepare-sdks', function() {
    fs.mkdirsSync('sdks');

    installSdk('extjs5.1.2');
    jsDuck('extjs5.1.2/ext', 'docs/config.json', 'docs-output');

    installSdk('extjs6.0.1');
    jsDuck('extjs6.0.1', 'docs/classic-config.json', 'docs-output/classic');
    jsDuck('extjs6.0.1', 'docs/modern-config.json', 'docs-output/modern');
});

/**
 * Deploys the jxcore-built binary to the target specified by the environment variable TERN_BUILD_DIR
 */
gulp.task('deploy-dev', ['build'], function() {
    var target = process.env['TERN_BUILD_DIR'];

    if (!target) throw new Error(
        `Environment variable TERN_BUILD_DIR not defined.\n\n
        TERN_BUILD_DIR must be the path to where the tern executable should be copied within your plugin project.\n\n
        For example:  export TERN_BUILD_DIR=/Users/mbrocato/Code/EclipsePlugin/com.sencha.eclipse/tern`
    )

    // copy build artifacts to IDE plugin target dir
    if (fs.existsSync('dist/tern.exe')) {
        fs.copySync('dist/tern.exe', `${target}/tern.exe`);
    } else {
        fs.copySync('dist/tern', `${target}/tern`);
        fs.copySync('dist/tern.version', `${target}/tern.version`);
    }
});

/**
 * Checks out a branch corresponding to an SDK version and copies it to sdks/
 * @param branch
 */
function installSdk(branch) {
    var destination = path.join(baseDir, 'sdks', branch);

    if (!fs.existsSync(destination)) {
        console.log(`Checking out ${branch}...`);
        process.chdir(SENCHA_SDK_PATH);
        execSync(`git checkout ${branch}`)
        console.log(`Installing ${branch}...`);

        fs.copySync(SENCHA_SDK_PATH, destination, {
            filter: function(file) {
                console.log('copying ' + file);
                return  file.indexOf('.git') === -1 &&
                        file.indexOf('.commit-template' === -1) &&
                        file.indexOf('.idea') === -1 &&
                        file.indexOf('docs-output') === -1;
            }
        });
    }
}

/**
 * Runs jsduck to extract metadata used to run integration tests
 * @param {String} sdkDir The path to the sdk in the sdks directory of this project
 * @param {String} configFile The path to the jsduck config json from the sdk root dir
 * @param {String} outputPath The path to where metadata json files should be written relative to the sdk root dir
 */
function jsDuck(sdkDir, configFile, outputPath) {
    console.log(`Generating jsduck metadata for ${sdkDir}/${configFile}`);
    var outputDir = path.join(baseDir, 'sdks', sdkDir, outputPath);
    if (fs.existsSync(outputDir)) fs.removeSync(outputDir);
    fs.mkdirsSync(outputDir);
    execSync(`jsduck --config=${path.join(baseDir, 'sdks', sdkDir, configFile)} --output ${outputDir} --export=full`);
}

/**
 * Inserts the build number into version.js
 * @param {String} buildCounter The build counter variable from TeamCity
 */
function updateVersionJs(buildCounter) {
    var versionJs = "plugin/ext/lib/version.js"
    var code = fs.readFileSync(versionJs, 'utf8');
    code = code.replace('{build}', buildCounter);
    fs.writeFileSync(versionJs, code, 'utf8');
}