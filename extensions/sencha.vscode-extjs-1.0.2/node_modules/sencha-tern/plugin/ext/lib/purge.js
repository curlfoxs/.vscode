var _ = require('lodash');

/**
 * To be applied to all scopes created by the plugin. Calls the original purge function and then deletes any properties which
 * no longer have a type.
 * @param {Function} purge The original purge function
 */
function purgeAndRemoveEmpty(purge) {
    purge.apply(this, Array.prototype.slice.call(arguments, 1));

    for (var prop in this.props) {
        if (!hasNonEmptyType(this.props[prop])) {
            delete this.props[prop];
        }
    }
}

function hasNonEmptyType(namespace) {
    if (!namespace.sencha) return true;
    return _.some(namespace.types, function(type) {
        return type.extJSClass || (type.props && Object.keys(type.props).length > 0);
    });
}

module.exports = {
    /**
     * Adds empty namespace cleanup to an scope's purge function.
     * @param {infer.Obj} scope
     */
    wrap: function(scope) {
        scope.purge = _.wrap(scope.purge, purgeAndRemoveEmpty);
    }
};