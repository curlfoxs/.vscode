var infer = require('../../../lib/infer'),
    _ = require('lodash'),
    purge = require('./purge'),
    visibility = require('./visibility');

function Namespace(name) {
    infer.Obj.call(this, false, name);
    purge.wrap(this);

    Object.defineProperty(this, 'origin', {
        get: Function.prototype
    });
};

Namespace.prototype = _.create(infer.Obj.prototype, {

    sencha: true,

    /**
     * Returns only visible properties
     * @override infer.Obj#gatherProperties
     * @param {Function} f
     * @param depth
     */
    gatherProperties: function(f, depth) {
        for (var prop in this.props) {
            var value = this.props[prop];
            if (value && visibility.isVisible(value) && prop != "<i>" && prop.charAt(0) != ":")
                f(prop, this, depth);
        }
        if (this.proto) this.proto.gatherProperties(f, depth + 1);
    }

});

module.exports = Namespace;