"use strict";

var TypeUtil = require('../TypeUtil'),
    _ = require('lodash'),
    indexes = require('../indexes'),
    infer = require('../../../../lib/infer'),
    findInComponentTree = require('../findInComponentTree'),
    IndexUtil = require('../IndexUtil'),
    util = require('../util'),
    visibility = require('../visibility');

function ViewComponentReference(node) {
    this.node = node;
    this.alias = findInComponentTree(this.node, 'alias')[0] || '';
}

/**
 * Returns all the values of all reference configs;
 * @returns {String[]}
 */
function getReferences() {
    var visibleKeys = indexes.usage.visibleKeys(),
        result = {};

    for (var k=0; k < visibleKeys.length; k++) {
        var entries = indexes.usage.get(visibleKeys[k]);

        for (var i=0; i<entries.length; i++) {
            var entry = entries[i];

            if (entry.property === 'reference') {
                result[entry.name] = true;
            }
        }
    }

    return Object.keys(result);
}

ViewComponentReference.prototype = {
    /**
     * Returns all available references
     * @returns {Object[]}
     */
    getCompletions: function() {
        return getReferences().map(function(name) {
            return { name: name, reference: 'ViewComponent' };
        });
    },

    /**
     * Returns the place in code where the view reference was declared
     * @returns {infer.AVal[]} The reference object
     */
    findDef: function() {
        var name = this.node.value,
            entries = _.filter(indexes.usage.get(name), function(e) { return e.property === 'reference' });

        return entries.map(function(entry) {
            var aval = new infer.AVal();
            aval.span = entry.span;
            aval.origin = entry.file;
            return aval;
        });
    }
};

module.exports = ViewComponentReference;
