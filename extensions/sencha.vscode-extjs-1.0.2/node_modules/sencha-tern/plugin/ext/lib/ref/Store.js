"use strict";

var _ = require('lodash'),
    infer = require('../../../../lib/infer'),
    ASTUtil = require('../ASTUtil'),
    cmdAutoDependencies = require('../cmdAutoDependencies'),
    indexes = require('../indexes'),
    walk = require('../walk'),
    appFor = require('../appFor'),
    IndexUtil = require('../IndexUtil');

function Store(node) {
    this.node = node;
}

Store.prototype = {
    getCompletions: function() {
        var completions = [],
            app = appFor(this.node);

        indexes.store.visibleKeys().forEach(function(storeId) {
            if (!app || !hasStoreId(app.name + '.store.' + storeId)) {
                completions.push({ name: storeId })
            }
        });

        for (var i=0; i<completions.length; i++) completions[i].reference='Store';

        return completions;
    },

    findDef: function() {
        var entry = indexes.store.get(this.node.value)[0];

        if (entry) {
            if (entry.implicit) {
                var app = appFor(this.node);
                return IndexUtil.createAValForClass(app.name + '.store.' + entry.name);
            } else {
                var result = new infer.AVal();
                result.origin = entry.file;
                result.span = entry.span;
                return result;
            }
        }
    }
};

/**
 * Returns true if the specified class has a store id property.
 * @param {String} className
 * @returns {boolean}
 */
function hasStoreId(className) {
    return IndexUtil.findConstructors(className).some(function(constructor) {
        return constructor && constructor.extJSClass && constructor.extJSClass.def.storeId;
    });
}

module.exports = Store;