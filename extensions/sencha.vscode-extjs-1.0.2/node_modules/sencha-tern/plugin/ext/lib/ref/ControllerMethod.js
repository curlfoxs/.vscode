"use strict";

var _ = require('lodash'),
    TypeUtil = require('../TypeUtil'),
    IndexUtil = require('../IndexUtil'),
    findInComponentTree = require('../findInComponentTree'),
    infer = require('../../../../lib/infer');

/**
 * A reference to a method on a bound controller, typically used as an event listener in a view.
 * @param {Node} node An literal node in a view class
 * @constructor
 */
function ControllerMethod(node) {
    this.node = node;
}

ControllerMethod.prototype = {

    /**
     * Returns all methods from controllers bound to the view in which the node resides
     * @returns {Array}
     */
    getCompletions: function() {
        var completions = [], methods = getBoundControllerMethods(this.node);

        for (var name in methods) {
            completions.push({ name: name, type: methods[name].controllerAlias, reference: 'ControllerMethod' });
        }

        return completions;
    },

    /**
     * Returns the origin of the controller method referenced by the node
     * @returns {*}
     */
    findDef: function() {
        return getBoundControllerMethods(this.node)[this.node.value];
    }

};

/**
 * Returns all controller methods that can be referenced at the given node
 * @param {Node} node
 * @returns {Object} A map of method name to property aval
 */
function getBoundControllerMethods(node) {
    //find controllers in hierarchy
    var controllers = findInComponentTree(node, 'controller'),
        members = {};

    controllers.forEach(function(alias) {
        var classNames = TypeUtil.classesForAlias('controller.' + alias);

        classNames.forEach(function(className) {
            IndexUtil.findPrototypes(className).forEach(function(proto) {
                var properties = proto.props;

                for(var p in properties) {
                    var value = properties[p];

                    if (IndexUtil.isPropertyOfUserClass(value) && value.types && value.types[0] instanceof infer.Fn) {
                        value.controllerAlias = alias;
                        members[p] = value;
                    }
                }
            });
        });
    });

    return members;
}

module.exports = ControllerMethod;