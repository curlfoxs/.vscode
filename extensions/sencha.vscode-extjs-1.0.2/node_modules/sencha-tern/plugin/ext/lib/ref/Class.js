"use strict";

var IndexUtil = require('../IndexUtil'),
    TypeUtil = require('../TypeUtil'),
    infer = require('../../../../lib/infer'),
    _ = require('lodash');

function Class(node) {
    this.node = node;
}

Class.prototype = {
    getCompletions: function() {
        if (TypeUtil.isExtDefine(this.node.parent)) {
            // exclude classes from completions in Ext.define.  See TERN-49
            return completeNamespace(this.node);
        } else {
            // no need to return completions for class names, tern automatically completes class names in string literals
            return null;
        }
    },

    findDef: function() {
        return IndexUtil.findConstructors(this.node.value)[0];
    }
};


/**
 * Returns namespace suggestions for the node's current value.  Classes are excluded.
 * @param {Node} node
 * @returns {Object[]}
 */
function completeNamespace(node) {
    var scope = node.value.replace(/\.[^\.]*$/, ''),
        ns = scope === '' ? infer.cx().topScope : infer.def.parsePath(scope, infer.cx().topScope),
        results = [];

    for (var prop in ns.props) {
        var isClass = _.find(ns.props[prop].types, function(type) {
            return type.hasOwnProperty('extJSClass')
        });

        if (!isClass) results.push({ name: prop });
    }

    return results;
}

module.exports = Class;