"use strict";

var TypeUtil = require('../TypeUtil'),
    _ = require('lodash'),
    infer = require('../../../../lib/infer');

function Event(node, sourceTypes) {
    this.node = node;
    this.sourceTypes = sourceTypes;
}

Event.prototype = {

    /**
     * Returns all available events
     * @returns {Object[]}
     */
    getCompletions: function() {
        var scope = this.scopeAt(this.node);

        var completions = TypeUtil.getMembers(scope, 'event', function(name, member) {
            return { name: name };
        });

        for (var i=0; i<completions.length; i++) completions[i].reference='Event';

        return completions;
    },

    /**
     * Returns the place in code where the event was declared
     * @returns {infer.AVal} An object representing the event
     */
    findDef: function() {
        var eventName = eventNameAt(this.node);

        if (eventName) {
            var scope = this.scopeAt(this.node);
            var match = _.find(TypeUtil.getMembers(scope, 'event'), function(member) {
                return member.name === eventName;
            });

            if (match) {
                var result = new infer.AVal();
                result.addType(match);
                return result;
            }
        }
    },

    /**
     * Returns the names of the classes that make up the scope for the specified node
     * @param {Node} node An AST node
     * @returns {String[]} An array of class names
     */
    scopeAt: function(node) {
        if (this.sourceTypes) {
            return this.sourceTypes;
        } else if (node.type === 'ObjectExpression') {
            return TypeUtil.typesOf(node.parent.parent);
        } else if (node.type === 'Property' || node.type === 'Identifier') {
            return TypeUtil.typesOf(node.parent.parent.parent);
        } else {
            return [];
        }
    }
};

/**
 * Returns the event name
 * @param {Node} node
 * @returns {String}
 */
function eventNameAt(node) {
    if (node.type === 'Literal') {
        return node.value;
    } else if (node.type === 'Property') {
        return node.key.name;
    }
}

module.exports = Event;