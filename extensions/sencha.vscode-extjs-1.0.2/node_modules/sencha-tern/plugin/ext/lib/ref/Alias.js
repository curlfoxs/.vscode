"use strict";

var indexes = require('../indexes'),
    _ = require('lodash'),
    IndexUtil = require('../IndexUtil'),
    TypeUtil = require('../TypeUtil'),
    ASTUtil = require('../ASTUtil');

var userOnlyPrefixes = ['controller.', 'viewmodel.'];

function Alias(node, rule) {
    this.node = node;
    this.rule = rule;
}

Alias.prototype = {
    getCompletions: function() {
        var rule = this.rule;

        var aliases = _.filter(indexes.alias.visibleKeys(), function(alias) {
            return alias.indexOf(rule.aliasPrefix) === 0
        });

        var completions = [];

        aliases.forEach(function(alias) {
            var types = indexes.alias.get(alias);

            if (shouldInclude(rule, types)) completions.push({
                name: alias.replace(rule.aliasPrefix, ''),
                type: _.uniq(types).join('/')
            })
        });

        for (var i=0; i<completions.length; i++) completions[i].reference='Alias';

        return completions;
    },

    findDef: function() {
        return IndexUtil.createAValForAlias(this.rule.aliasPrefix + this.node.value);
    }
};

/**
 * Returns true if the alias should be included.  Some aliases are only included from user classes, such as controller and view model.
 * @param {Object} rule
 * @param {Object[]} types
 * @returns {boolean}
 */
function shouldInclude(rule, types) {
    if (userOnlyPrefixes.indexOf(rule.aliasPrefix) !== -1 && _.find(types, function(type) { return type.indexOf('Ext.') === 0 })) {
        return false;
    }

    return true;
}

module.exports = Alias;