"use strict";

var _ = require('lodash'),
    toolkitFor = require('./toolkitFor'),
    util = require('./util');

/**
 * Returns completed document url for Ext and Touch version(s)
 * @param {Object} origin The origin file
 * @param {Object} toolkit The file's toolkit
 * @param {String} [className] The fully qualified name of the class
 * @param {Object} [options] Options to build url
 * @param {String} options.name The member name
 * @param {String} options.type The type of member (property, method, event, or config)
 * @param {Boolean} options.isStatic True for static methods and properties, otherwise false
 * @returns {String} documentation url
 */
module.exports = function urlFor(origin, className, options) {
    options = options || {};

    _.assign(options, {
        sdk: sdkFor(origin),
        toolkit: toolkitFor(origin),
        className: className
    });

    return new Builder(options || {}).buildUrl();
};

/**
 * Returns the sdk associated with the specified file
 * @param {String} origin a file path
 * @returns {Object}
 */
function sdkFor(origin) {
    var apps = global.tern.apps;

    for (var i=0; i<apps.length; i++) {
        var app = apps[i], sdk = app.sdk;

        if (sdk && sdk.path && (/* in sdk */ util.startsWithIgnoreCase(origin, sdk.path) || /* in app */ util.startsWithIgnoreCase(origin, app.path))) {
            return sdk;
        }
    }

    if (global.tern.sdks.length === 1) return global.tern.sdks[0];
}

/**
 * Constructor for UrlBuilder class. Builds document url.
 * @param {Object} options Options to build url
 * @param {String} options.toolkit The toolkit in which the class resides
 * @param {String} options.className The fully-qualified class name
 * @param {String} options.name The member name
 * @param {String} options.type The type of member (property, method, event, or config)
 * @param {Boolean} options.isStatic True for static methods and properties, otherwise false
 * @constructor
 */
function Builder(options) {
    _.assign(this, options);
};

/**
 * Builder Prototype
 * @type {{buildUrl: Builder.buildUrl, getBaseUrl: Builder.getBaseUrl, getAppVersionUrl: Builder.getAppVersionUrl}}
 */
Builder.prototype = {
    /**
     * Builds a doc url
     * @returns {String} doc url
     */
    buildUrl: function() {
        var baseUrl = this.getBaseUrl(),
            appUrl = this.getAppVersionUrl(),
            memberUrl = this.getMemberUrl();

        if (baseUrl && appUrl) {
            return baseUrl + appUrl + memberUrl;
        }
    },

    /**
     * Get base url for Sencha documentation
     * @returns {string} Base url
     */
    getBaseUrl: function() {
        return 'http://docs.sencha.com/';
    },

    /**
     * Get version information for the document url
     * @returns {*|string} Partial url
     */
    getAppVersionUrl: function() {
        var url;

        if (this.sdk && this.sdk.version) {
            var versions = this.sdk.version.split('.');
            url = this.sdk.framework + '/';

            var majorVersion,
                minorVersion,
                patchVersion;

            if (versions) {
                majorVersion = versions[0];
                minorVersion = versions[1];
                patchVersion = versions[2];
                this.majorVersion = majorVersion;
            }
            var section = this.sdk.framework === 'touch' ? 'apidocs' : 'api';
            if (majorVersion && minorVersion && patchVersion) {
                switch (this.sdk.framework) {
                    case 'extjs':
                        if (parseInt(majorVersion) >= 6) {
                            section = this.toolkit === 'core' ? 'modern' : this.toolkit;
                        }
                        if (majorVersion < 5) {
                            url += majorVersion + '.' + minorVersion + '.' + patchVersion + '/#!/api'
                        } else {
                            url += majorVersion + '.' + minorVersion + '.' + patchVersion + '/' + section;
                        }
                        break;
                    case 'touch':
                        if(majorVersion >= 2 && minorVersion < 4) {
                            url += majorVersion + '.' + minorVersion + '.' + patchVersion + '/#!/api';
                        } else {
                            url += majorVersion + '.' + minorVersion + '/' + majorVersion + '.' + minorVersion + '.' + patchVersion + '-' + section + '/#!/api';
                        }
                        break;

                }
            }
        } else if (this.className && this.className.match(/^ST(\.|$)/)) {
            url = 'sencha_test/apidocs/#!/api'
        }
        return url || '';
    },

    /**
     * Get partial node url for configs, properties, methods, static methods and events
     * @returns {*|string} Partial url
     */
    getMemberUrl: function() {
        if (!this.className || !this.className.match(/^(Ext|ST)(\.|$)/)) {
            return (this.majorVersion >= 5 && this.majorVersion < 6 ? '/Ext.html' : '');
        } else if (this.className && this.name && this.type) {
            if (this.majorVersion >= 5) {
                return '/' + this.className + '.html#' + (this.isStatic ? 'static-' : '') + this.type + '-' + this.name;
            } else {
                return '/' + this.className + '-' + (this.isStatic ? 'static-' : '') + this.type + '-' + this.name;
            }

        } else if (this.className) {
            return '/' + this.className + (this.majorVersion >= 5 ? '.html' : '');
        }
    }
};

