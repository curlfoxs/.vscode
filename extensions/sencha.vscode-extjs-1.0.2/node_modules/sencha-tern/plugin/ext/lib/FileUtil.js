'use strict';

var path = require('path'),
    fs = require('fs-extra'),
    ignore = require('./ignore');

var FileUtil = {

    /**
     * @property {String}
     * Path to the directory where non version-controlled files should be stored
     */
    tempDir: undefined,

    /**
     * @property {String}
     * Path to the directory where version-controlled files should be stored
     */
    resourcesDir: undefined,

    /**
     * Ensures that the temp and resources directories exist and that the temp directory
     * is git ignored.
     *
     * See https://sencha.jira.com/wiki/display/engineering/Sencha+User+Project+Footprint
     *
     * Creates:
     *
     *  (baseDir)
     *      .sencha
     *          ide
     *          temp
     *              .ide
     *
     * @param {String} baseDir The path to the directory where resource directories should exist.
     */
    ensureSenchaDirs: function(baseDir) {
        var senchaDir = path.join(baseDir, '.sencha');
        FileUtil.tempDir = path.join(senchaDir, 'temp', '.ide');
        FileUtil.resourcesDir = path.join(senchaDir, 'ide');
        fs.mkdirsSync(FileUtil.tempDir);
        fs.mkdirsSync(FileUtil.resourcesDir);
        ignore.ensureIgnoredSync(senchaDir, 'temp', 'Added by Sencha IDE Plugin');
        migrateIndexes();
    }

};


/**
 * Migrates index data from .sencha-ide to .sencha/temp/.ide for 6.0.3
 */
function migrateIndexes() {
    var oldDir = '.sencha-ide';

    if (fs.existsSync(oldDir)) {
        fs.readdirSync('.sencha-ide').forEach(function(name) {
            var file = path.join('.sencha-ide', name),
                dest = path.join(FileUtil.tempDir, name);

            if (!fs.existsSync(dest)) {
                fs.copySync(file, dest);
            }
        });
        fs.remove(oldDir);
    }
}

module.exports = FileUtil;