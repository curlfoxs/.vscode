var visibility = require('../../../ext/lib/visibility'),
    should = require('./../lib/chai_setup'),
    path = require('path'),
    TestUtil = require('../lib/test_util');

describe('visibility', function() {
    afterEach(TestUtil.cleanup); // rebuild the server before each test so that test classes don't bleed over between tests

    describe('isVisible', function() {
        beforeEach(function() {
            global.tern.apps = [{
                name: 'App1',
                path: path.join("PrOjEcTs", "aPp1"),
                sdk: {
                    path: path.join("PrOjEcTs", "ext")
                }
            }, {
                name: 'App2',
                path: path.join("PrOjEcTs", "aPp2"),
                sdk: {
                    path: path.join("PrOjEcTs", "touch")
                }
            }];

            visibility.setContext(path.join('proJectS', 'aPP2', 'MyFile.js'));
        });

        it('should ignore case', function() {
            visibility.isVisible(path.join("PROJECTS", "App2", "View.js")).should.eq(true);
        });

        it('should return false for files in other apps', function() {
            visibility.isVisible(path.join("PROJECTS", "App1", "View.js")).should.eq(false);
        });

        it("should return true for files in the app's sdk", function() {
            visibility.isVisible(path.join("projects", "Touch", "View.js")).should.eq(true);
        });

        it("should return false for files in another sdk", function() {
            visibility.isVisible(path.join("projects", "ext", "View.js")).should.eq(false);
        });

        it("should return true for files not tied to an sdk or app", function() {
            visibility.isVisible(path.join("foo", "View.js")).should.eq(true);
        });
    })
});