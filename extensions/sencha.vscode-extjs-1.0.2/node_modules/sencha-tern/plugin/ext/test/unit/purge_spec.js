"use strict";

var TestUtil = require('./../lib/test_util'),
    should = require('./../lib/chai_setup'),
    _ = require('lodash'),
    infer = require('../../../../lib/infer'),
    path = require('path'),
    IndexUtil = require('../../../ext/lib/IndexUtil'),
    indexes = require('../../../ext/lib/indexes');

describe('purge', function() {
    afterEach(TestUtil.cleanup); // rebuild the server before each test so that test classes don't bleed over between tests

    it('should remove empty namespaces', function() {
        TestUtil.assertAtCaret('purge/namespaces', 'caret', function() {
            IndexUtil.findPrototypes('Test.view.User').length.should.eq(1);
            indexes.alias.get('widget.user').length.should.eq(1);
            indexes.alias.get('widget.group').length.should.eq(1);

            // deleting User.js should leave Group and the Test.view namespace intact
            infer.purge([path.resolve('User.js')]);
            IndexUtil.findPrototypes('Test.view.User').length.should.eq(0);
            IndexUtil.findPrototypes('Test.view.Group').length.should.eq(1);
            indexes.alias.get('widget.user').length.should.eq(0);
            (infer.cx().topScope.props.Test === undefined).should.be.false;;

            // deleting Group.js should also remove the Test namespace
            infer.purge([path.resolve('Group.js')]);
            IndexUtil.findPrototypes('Test.view.Group').length.should.eq(0);
            indexes.alias.get('widget.group').length.should.eq(0);
            (infer.cx().topScope.props.Test === undefined).should.be.true;;
        });
    });

    it('should remove types when origin case does not match', function() {
        TestUtil.assertAtCaret('purge/namespaces', 'caret', function() {
            IndexUtil.findPrototypes('Test.view.User').length.should.eq(1);
            indexes.alias.get('widget.user').length.should.eq(1);
            infer.purge([path.resolve('User.js').toUpperCase()]);
            IndexUtil.findPrototypes('Test.view.User').length.should.eq(0);
            indexes.alias.get('widget.user').length.should.eq(0);
        });
    });
});
