var should = require('./../lib/chai_setup'),
    appFor = require('../../../ext/lib/appFor'),
    path = require('path'),
    TestUtil = require('../lib/test_util');

describe('appFor', function() {
    afterEach(TestUtil.cleanup); // rebuild the server before each test so that test classes don't bleed over between tests

    it('should find the app even when the file path case is wrong', function() {
        global.tern.apps = [{
            name: 'App1',
            path: path.join('Projects', 'App1')
        }, {
            name: 'App2',
            path: path.join('Projects', 'App2')
        }];

        global.tern.sdks = [];

        appFor(path.join('PROJECTS', 'app2')).name.should.eq('App2');
        appFor({ sourceFile: { name: path.join('PROJECTS', 'app2') }}).name.should.eq('App2');
    });

    it('should find the correct sdk when the value of the frameworks key is a string', function() {
        TestUtil.assertAtCaret("appFor/workspaceAsString", "caret", function(element) {
            var app = appFor(element);
            app.sdk.path.should.eq(path.resolve(path.join('..', '..', 'appFor/workspaceAsString/ext')));
            app.sdk.version.should.eq('6.2.0.981');
        });
    });

    it('should find the correct sdk when the frameworks value has a path prop', function() {
        TestUtil.assertAtCaret("appFor/workspaceWithPath", "caret", function(element) {
            var app = appFor(element);
            app.sdk.path.should.eq(path.resolve(path.join('..', '..', 'appFor/workspaceWithPath/ext-6.2.0')));
            app.sdk.version.should.eq('6.2.0.981');
        });
    });

    it('should find the correct sdk when the frameworks value has a source prop', function() {
        TestUtil.assertAtCaret("appFor/workspaceWithSource", "caret", function(element) {
            var app = appFor(element);
            app.sdk.path.should.eq(path.resolve(path.join('..', '..', 'appFor/workspaceWithSource/sdks/ext-6.2.0')));
            app.sdk.version.should.eq('6.2.0.981');
        });
    });

    it('should return the only app not in an sdk if there is only one', function() {
        TestUtil.assertAtCaret("appFor/singleApp", "caret", function(element) {
            var app = appFor(element);
            global.tern.apps.length.should.eq(2);
            app.path.should.eq(path.resolve(path.join('..', '..', 'appFor/singleApp/App')));
        });
    })
});