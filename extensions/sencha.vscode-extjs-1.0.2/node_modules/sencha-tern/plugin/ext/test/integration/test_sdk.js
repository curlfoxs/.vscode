var chai = require('../lib/chai_setup');
var _ = require('lodash');
var fs = require('fs');
var tern = require('../../../../lib/tern');
var resolve = require('resolve');
var TestUtil = require('../lib/test_util');
var path = require('path');
var parseJSDuck = require('./parse_jsduck');
var AssertionError = require('assertion-error');
require('../../../ext');

var baseDir = process.cwd();

module.exports = function testSdk(version, jsduckDir, cursorFile, ignoreErrors) {
    var dir = path.join(baseDir, 'sdks', version, jsduckDir);
    if (!fs.existsSync(dir)) throw new Error(dir + " not found.");

    TestUtil.reset("extjs/" + version);
    var server = TestUtil.server;

    fs.readdirSync(dir).forEach(function(file) {
        //if (file.indexOf('Ext.dom.Layer') !== 0) return;

        var def = parseJSDuck(dir + '/' + file);

        if (def.name.length === 0 || def.name.indexOf('Ext.') !== 0 || def.private || def.protected || def.name.match(/^Ext.enums/) || def.deprecated) return;

        it('should complete ' + def.name + ' class members', function() {
            var expected = def.singleton ? def.instanceProperties : def.staticProperties;
            assertCompletions(server, expected, cursorFile, def.name + '.', def.name + ' is missing class members:', ignoreErrors);
        });

        if (!def.singleton) {
            it('should complete ' + def.name + ' instance members', function() {
                assertCompletions(server, def.instanceProperties, cursorFile, "Ext.create('" + def.name + "').", def.name + ' is missing instance members:', ignoreErrors);
            });

            it('should complete ' + def.name + ' configs', function() {
                assertCompletions(server, def.configs, cursorFile, "Ext.create('" + def.name + "', {", def.name + ' is missing configs:', ignoreErrors);
            });

            it('should complete ' + def.name + ' events', function() {
                assertCompletions(server, def.events, cursorFile, "Ext.create('" + def.name + "', { listeners: {", def.name + ' is missing events:', ignoreErrors);
            });
        }
    });
};

/**
 * Asserts that only the expected completions are returned
 * @param {tern.Server} server
 * @param {String[]} expected The expected completions
 * @param {String} The path to the file in which the cursor should be placed for completions
 * @param {String} code Code that terminates at the point of completion
 * @param {String[]} ignoreErrors Errors to ignore
 */
function assertCompletions(server, expected, cursorFile, code, message, ignoreErrors) {
    var request = {
        files: [{
            type: "full",
            name: path.resolve(cursorFile),
            text: code
        }],
        query: {
            type: "completions",
            file: '#0',
            end: code.length,
            types: true,
            includeKeywords: true,
            sort: true,
            guess: true,
            docs: true,
            urls: true,
            origins: true,
            lineCharPositions: true,
            caseInsensitive: true
        }
    };

    server.request(request, function (err, data) {
        if (err) throw err;

        // remove aria configs which do not appear in jsduck
        var actual = _.reject(_.pluck(data.completions, 'name'), function(value) { return value.indexOf('aria') === 0 }),
            missing = _.difference(expected, actual);

        if (missing.length) {
            var error = message + ' ' + missing.join(', ');

            if (ignoreErrors.indexOf(error) === -1) {
                throw new AssertionError(error);
            }
        }
    });
}

