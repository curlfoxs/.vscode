(function() {
    ST.expectStub = {};

    ST.initMatchers = function () {
        ST.expectStub = {
            isNot: false
        };

        var makeStubFn = function (matcher) {
            return function() {
                var me = this,
                    future = me.future,
                    rec2 = future._buildRec('expect', {
                        remoteable: false,
                        args: {
                            property: me.args[0],
                            matcher: matcher,
                            expectedArgs: arguments,
                            isNot: me.isNot
                        },
                        ready: function () {
                            return true;
                        },
                        fn: function () {
                            var args = this.args;

                            this.future.get(args.property).and(function () {
                                var ex = expect(this.future.data[args.property]);
                                if (args.isNot) {
                                    ex = ex.not;
                                }
                                var mfn = ex[args.matcher];
                                if (typeof mfn === 'undefined') {
                                    throw new Error('matcher '+args.matcher+' is not available');
                                } else {
                                    mfn.apply(ex, args.expectedArgs);
                                }
                            });
                        }
                    });

                future.play(rec2);

                return future;
            };
        }

        // TODO refactor to support frameworks other than jasmine
        try {
            var e = expect();
            for (var fn in e) {
                if (fn.indexOf('to') === 0) {
                    ST.expectStub[fn] = makeStubFn(fn);
                }
            }
        } catch(e) {
            for (var matcher in jasmine.matchers) {
                ST.expectStub[matcher] = makeStubFn(matcher);
            }
        }

    };

    ST.Expect = ST.define({
        constructor: function (future, arguments) {
            var me = this;

            me.future = future;
            me.args = arguments;
            ST.apply(me,ST.expectStub);

            me.not = {
                future: future,
                args : arguments
            };
            ST.apply(me.not, ST.expectStub);
            me.not.isNot = true;
        }
    });

    ST.initMatchers();
}());
