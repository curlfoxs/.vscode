// TODO get pointer indicators working here??? like in Local/Injector
ST.webdriverBrowser = true; // TODO remove this in preference for interrogating the defaultContext?
// NOTE: magic code at the end of this to set the default context to this class...

ST.context.LocalWebDriver = ST.define({
    extend: ST.context.Local,

    constructor: function (config) {
        var me = this;

        ST.context.LocalWebDriver.superclass.constructor.call(this, config);

        me.heartbeatSeed = Date.now();

        window.onbeforeunload = me.onbeforeunload;
        window.unload = me.unload;
    },

    // TODO kind of a bummer that ready() and callFn() don't use the same created Playable... :(
    // TODO TODO TODO for performance

    createPlayable: function (event) {
        var playable = ST.context.LocalWebDriver.superclass.createPlayable(event),
            related;

        if (playable) {
            playable.future = this._createInstance(event.futureClsName);
            ST.apply(playable.future, event.future);
        }

        // do some translation of dom elements into ST.Elements
        if (event.webElement) {
            playable.targetEl = ST.fly(event.webElement, 'playable');
            // TODO locatorChain?
        }
        if (event.future) {
            // what's the diff between future.el and future.locator.targetEl???
            if (event.future.webElement) {
                playable.future.el = ST.fly(event.future.webElement, 'future');
                if (playable.future._attach) {
                    playable.future._attach(); // setup this.future.cmp
                }
            }
            related = event.future.related;
            for (var name in related) {
                var relatedConfig = related[name],
                    relatedClsName = relatedConfig.futureClsName,
                    relatedFuture;

                if (relatedConfig.isFuture) {
                    relatedFuture = relatedConfig;
                } else {
                    relatedFuture = this._createInstance(relatedClsName, {});
                    relatedFuture.el = new ST.Element(relatedConfig.webElement);
                    relatedFuture.data = relatedConfig.data;
                    if (relatedFuture._attach) {
                        relatedFuture._attach();
                    }
                }
                
                playable.future.setRelated(name, relatedFuture);
            }
            // TODO other kinds of locators??? Not just simple Playables with webElement and locatorChain?
            if (event.future.locator) {
                playable.future.locator = new ST.playable.Playable({
                    targetEl: ST.fly(event.future.locator.webElement, 'locator'),
                    locatorChain: event.future.locator.locatorChain
                });
            }
        }

        if (event.target && event.target.webElement) {
            playable.target = new ST.playable.Playable({
                targetEl: ST.fly(event.target.webElement, 'target'),
                locatorChain: event.target.locatorChain
            });
        }

        return playable;
    },

    heartbeat: function () {
        var me = this;
        console.log('STHB:' + ++me.heartbeatSeed);
    },

    onbeforeunload: function (evt) {
        // TODO: use sendMessage instead of doing the message manually.
        var me = this,
            message = {
                to: 'sandbox',
                type: 'navigate',
                seq: ++me._seq
            };

        // Capture page navigation - send messages (events) we have before we transition
        // There is a possibility that the recorder doesn't exist at some points
        if (ST.defaultContext.recorder) {
            ST.defaultContext.recorder.flush();
        }
        console.log('STM:' + JSON.stringify(message));
    },

    onunload: function (evt) {
        // TODO: use sendMessage instead of doing the message manually.
        var me = this,
            message = {
                to: 'sandbox',
                type: 'navigate',
                seq: ++me._seq
            };

        // Capture page navigation - send messages (events) we have before we transition
        // There is a possibility that the recorder doesn't exist at some points
        if (ST.defaultContext.recorder) {
            ST.defaultContext.recorder.flush();
        }
        console.log('STM:' + JSON.stringify(message));
    },

    sendMessage: function (message) {
        var me = this;

        if (typeof message != 'object') {
            message = {
                type: message
            };
        }
        if (!message.to) {
            message.to = 'runner';
        }

        message.seq = ++me._seq;
        console.log('STM:' + JSON.stringify(message));
    },

    startHeartbeat: function (heartbeatInterval) {
        var me = this;

        if (!me.heartbeating) {
            me.heartbeating = setInterval(me.heartbeat.bind(me), heartbeatInterval);
        }
    },

    stopHeartbeat: function () {
        if (me.heartbeating) {
            clearInterval(me.heartbeating);
        }
    },

    isLocalWebDriverContext: true
});

if (!ST.defaultContext) {
    ST.defaultContext = new ST.context.LocalWebDriver();
}

