//-----------------------------------------------------------------------
// Ext._beforereadyhandler is called very early on Ext JS initialization,
// so we use it to block ST immediately in case the framework is
// present and unblock it once it's ready. But that's not the end of the
// story - see orion.js afterFiles().

if (ST.LOGME) console.log('setup-ext.js, Ext='+Ext)
if (Ext) {
    if (ST.LOGME) console.log('Ext.isReady='+Ext.isReady);
}

ST.isClassical = function () {
    if (typeof ST.isClassic === 'undefined') {
        ST.initExtJS();
    }
    if (ST.LOGME) console.log('ST.isClassical(), ST.isClassic=>'+ST.isClassic);
    return ST.isClassic;
}

// TODO shouldn't we ST.ready.block() before ALL of this??? and then let it fly?
ST.initExtJS = function () {
    if (ST.LOGME) console.log('ST.initExtJS(), Ext.getVersion='+Ext.getVersion);
    ST.Ext = Ext; // feature detector for Ext JS (since we created the global)
    if (Ext.getVersion) {
        ST.isModern = Ext.isModern;
        ST.isTouch = !!Ext.versions.touch;
        ST.isClassic = !ST.isModern && !ST.isTouch;
        ST.sdkVersion = new ST.Version(Ext.getVersion().version);
    }
    if (ST.LOGME) console.log('ST.initExtJS(), ST.isClassic='+ST.isClassic);
}

// If Ext is already defined and is ready, just proceed to set everything up
if (Ext && Ext.isReady) {
    if (ST.LOGME) console.log('Ext && Ext.isReady so call ST.initExtJS in 10 ms');
    setTimeout(ST.initExtJS, 10);
} 
// otherwise, use _beforereadyhandler
else {
    if (ST.LOGME) console.log('set _beforereadyhandler function, Ext=',Ext);
    var Ext = Ext || {};

    Ext._beforereadyhandler = function() {
        if (ST.LOGME) console.log('setup-ext.js _beforereadyhandler called');
        ST.initExtJS();
        ST.ready.block();

        Ext.onReady(function () {
            if (ST.LOGME) console.log('Ext.onReady() is called');
            ST.defer(function() {
                // Slightly delayed to ensure that this runs after any user onReady
                // handlers.  This approach is preferred over using the priority option
                // because it works with all versions of the framework.
                ST.ready.unblock();
            }, 100);
        });
    };
}