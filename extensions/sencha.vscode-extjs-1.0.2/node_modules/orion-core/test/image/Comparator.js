'use strict';

var Comparator = require('orion-core/lib/image/Comparator');
var Image = require('orion-core/lib/image/Image');
var xfs = require('orion-core/lib/xfs');

require('jasmine-co').install();

describe('Comparator', function () {
    
    beforeEach(function () {
        this.comparator = new Comparator();
    });
    
    afterEach(function () {
        this.comparator.destroy();
    });
    
    it('compares png files', function* () {
        var expected = xfs.resolve('test/image/expected.png'),
            actual = xfs.resolve('test/image/actual.png'),
            result;
        
        result = yield this.comparator.compare(expected, actual);
        expect(result.diffCount).toBeGreaterThan(0);
    });
    
    it('returns 0 diffCount when images are identical', function* () {
        var expected = xfs.resolve('test/image/actual.png'),
            actual = xfs.resolve('test/image/actual_copy.png'),
            result;
        
        result = yield this.comparator.compare(expected, actual);
        expect(result.diffCount).toBe(0);
        expect(this.foo).toBeUndefined();
    });
    
    it('compares large png files', function* () {
        var expected = xfs.resolve('test/image/bigone.png'),
            actual = xfs.resolve('test/image/bigone.png'),
            result;
        
        result = yield this.comparator.compare(expected, actual);
        expect(result.diffCount).toBe(0);
    });
    
    describe('asymetrical files diff', function () {
        var smallerPath = xfs.resolve('test/image/smaller.png'),
            largerPath = xfs.resolve('test/image/larger.png'),
            smaller = new Image(smallerPath),
            larger = new Image(largerPath);
        
        beforeAll(function* () {
            yield smaller.load();
            yield larger.load();
        });
        
        
        it('has a non-zero diff count', function* () {
            var result = yield this.comparator.compare(smallerPath, largerPath);
            expect(result.diffCount).toBeGreaterThan(0);
        });
        
        it('has the dimensions of the largest image', function* () {
            var result;
            
            expect(larger.width).toBeGreaterThan(smaller.width);
            expect(larger.height).toBeGreaterThan(smaller.height);
            
            result = yield this.comparator.compare(smallerPath, largerPath);
            expect(result.width).toBe(larger.width);
            expect(result.height).toBe(larger.height);

            result = yield this.comparator.compare(largerPath, smallerPath);
            expect(result.width).toBe(larger.width);
            expect(result.height).toBe(larger.height);
        });
    });

});

