'use strict';

const Path  = require('path');
const Shell = require('electron').shell;
const IpcMain = require('electron').ipcMain;


const Base        = require('./Base');
const Platform    = require('./Platform');
const AppSettings = require('./AppSettings');
const Util        = require('./Util');

class App extends Base {
    static init (config) {
        return this.instance = new this(config);
    }

    ctor () {
        let me = this,
            settings = me.settings;

        me.quit = me.quit.bind(me);
        me.captureWindowBox = me.captureWindowBox.bind(me);

        me.platform = new Platform(Object.assign({
            app: me,
            asar: Path.resolve(me.root, 'app.asar')
        }, me.platform));

        me.settings = new AppSettings(Object.assign({
            logger: me.platform,
            filePath: me.platform.appRoot
        }, me.settingsConfig = me.settings));

        me.license.log = me.log.bind(me);

        me.electron.app.on('ready', me.start.bind(me));

        IpcMain.on('set-proxy-auth', function(event, arg) {
            me.proxyAuthCallback(arg.username, arg.password);
        });

        me.electron.app.on('login', function(event, webContents, request, authInfo, callback) {
            event.preventDefault();
            if(authInfo.isProxy) {
                me.mainWindow.webContents.send('get-proxy-auth','yeah!');
                me.proxyAuthCallback = callback;
            }
        });
    }

    log (msg) {
        (this.platform || console).log(msg);
    }

    error (msg) {
        (this.platform || console).error(msg);
    }

    captureWindowBox () {
        var mainWindow = this.mainWindow,
            bounds;

        if (mainWindow.isMaximized()) {
            bounds = { maximized: true };
        } else {
            bounds = this.mainWindow.getBounds();
            bounds.maximized = false;
        }

        this.windowBox = bounds;
    }

    quit () {
        console.log('===> Quitting Electron because main window has closed.\n');

        // Reload the settings file since the UI/App may have made changes as well
        //
        var me = this,
            settings = new AppSettings(Object.assign({
                logger: me.platform,
                filePath: me.settings.filePath
            }, me.settingsConfig));

        settings.set(this.windowBox);
        settings.save();

        this.electron.app.quit();
    }

    start () {
        let me = this,
            urlRegEx = /localhost/i,
            settings = me.settings.get(),
            mainWindow = me.mainWindow = new me.browserWindow({
                /**
                 * `icon` is for linux only. Mac/Windows icon comes from the
                 * icon setting in the electron build in `Gruntfile.js`
                 */
                icon: Path.resolve(me.indexPath, 'resources', 'sencha.png'),
                x: settings.x,
                y: settings.y,
                width: settings.width,
                height: settings.height,
                'minWidth': 1000,
                'minHeight': 600
            });

        if (settings.maximized) {
            mainWindow.maximize();
        }

        mainWindow.on('move',   me.captureWindowBox);
        mainWindow.on('resize', me.captureWindowBox);
        mainWindow.on('closed', me.quit);

        //open links in the browser, not in an electron new window
        mainWindow.webContents.on('new-window', function (e, url) {
            if (!urlRegEx.test(url)) {
                e.preventDefault();
                Shell.openExternal(url);
            }
        });
        // prevent drag-n-dropping of files onto the electron window from navigating
        mainWindow.webContents.on('will-navigate', function (e) {
            e.preventDefault();
        });

        me.licenseCheck();
    }

    licenseCheck () {
        var me = this;

        if (me.license.expired) {
            me.onTimeBomb();
        } else {
            let mainWindow = me.mainWindow;

            mainWindow.loadURL('file://' + Path.resolve(me.indexPath, 'index.html'));
        }
    }

    onTimeBomb () {
        var me = this,
            mainWindow = me.mainWindow;

        //don't want to save size/position when showing timebomb
        mainWindow.removeListener('move',   me.captureWindowBox);
        mainWindow.removeListener('resize', me.captureWindowBox);

        mainWindow.setMinimumSize(400, 200);
        mainWindow.setSize(400, 200);
        mainWindow.setResizable(false);

        mainWindow.loadURL('file://' + Path.resolve(me.indexPath, 'expired.html'));
    }
}

module.exports = App;
