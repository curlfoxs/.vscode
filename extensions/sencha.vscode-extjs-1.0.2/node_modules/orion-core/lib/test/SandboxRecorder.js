'use strict';

var SandboxRunner = require('./SandboxRunner');
var ReporterBase = require('../reporter/ReporterBase');

class EventRecorderReporter extends ReporterBase {
    constructor (cfg) {
        super(cfg);
        Object.assign(this, cfg);
        this.recordEnabledTests = [];
    }

    testRunStarted (message) {
        var agent = message.agent;
        this.runner.fire({
            type: 'testrunstarted',
            agent: agent,
            message: message
        });
    }

    testRunFinished (message) {
        var agent = message.agent;
        this.runner.fire({
            type: 'testrunfinished',
            agent: agent,
            message: message
        });
    }

    recordingStarted (message) {
        this.runner.fire('recordingstarted');
    }

    recordingStopped (message) {
        this.runner.agent.terminate();
        this.runner.fire('recordingstopped');
    }

    recordedEvents (message) {
        this.runner.fire({
            type: 'recordedevents',
            events: message.events
        });
    }

    testAdded (message) {
        var testDef = message.testDef;
        if (testDef.recording) {
            this.recordEnabledTests.push(testDef);
        }
    }

    afterFiles (message) {
        var agent = message.agent,
            len = this.recordEnabledTests.length;
        if (len === 0) {
            this.runner.fire({
                type: 'recordingerror',
                message: 'no recording enabled tests detected'
            });
        } else if (len > 1) {
            this.runner.fire({
                type: 'recordingerror',
                message: 'multiple recording enabled tests detected',
                tests: this.recordEnabledTests
            });
        } else {
            this.runner.recordAgent = agent;
            agent.startTestRun(null, this.recordEnabledTests.map(function(test){
                return test.id;
            }));
        }
    }

    systemError (message) {
        var me = this,
            agent = message.agent,
            error = message.error || message.message;

        if (typeof error === 'object'){
            error = JSON.stringify(error, null, 4);
        }
        
        Studio.alert(error);

        if (me.isRecording) {
            agent.stopRecording();
        }

        Ext.fireEvent('systemerror', message);
    }

}

class SandboxRecorder extends SandboxRunner {
    ctor () {
        var me = this,
            agentGroup, params, sandboxAgent, url;

        me.isRecording = true;
        me.reporter = new EventRecorderReporter({
            runner: this
        });

        agentGroup = me._getAgentGroup({
            id: me._generateAgentGroupId(),
            browser: me.browser || null
        });
        sandboxAgent = me.agent = me._getAgent({
            id: me._generateAgentId(),
            terminateOnFinish: me.terminateAgents,
            sandboxBrowser: me.browser,
            isRecording: true
        });

        agentGroup.add(sandboxAgent);

        params = {
            orionAgentId: sandboxAgent.id,
            orionRecording: me.isRecording
        };

        me.proxy.on({
            scope: me,
            single: true,
            started: function(event) {
                if (sandboxAgent) {
                    sandboxAgent.url = me.getAgentContactUrl(params);
                    sandboxAgent.launch();
                }
            }
        });
    }

    cleanupAgents () {
        var me = this;
        me.agent.stopRecording();
    }
}

module.exports = SandboxRecorder;
