'use strict';

const Base = require('orion-core/lib/Base');
const Zip = require('orion-core/lib/fs/Zip');
const xfs = require('orion-core/lib/xfs');

const co = require('co');
const fs = require('fs');
const rp = require('request-promise');
const url = require('url');
const util = require('util');
const path = require('path');

class Client extends Base {
    
    upload(archive, options) {
        var me = this;
        var request = {
            method: 'POST',
            uri: url.resolve(me.server, '/upload'),
            formData: {
                storageKey: options.storageKey || me.storageKey,
                archivePath: options.archivePath || '',
                archive: fs.createReadStream(archive)
            },
            resolveWithFullResponse: true
        };
        
        var promise = rp(request)
            .then(function (response) {
                return util.format('Server response: %s - %s',
                    response.statusCode,
                    (response.body || response.statusMessage));
            })
            .catch(function (err) {
                var response = err.response;
                
                return util.format('Server response: %s - %s',
                    response.statusCode,
                    (response.body || response.statusMessage));
            });
        
        return promise;
    }

    download(options) {
        var me = this;
        var localPath = path.normalize(options.localPath);
        var parentDirPath = path.dirname(localPath);
        var request = {
            method: 'POST',
            uri: url.resolve(me.server, '/download'),
            body: {
                root: options.root,
                storageKey: options.storageKey || me.storageKey,
                path: options.path
            },
            json: true,                    // auto convert request body to JSON
            encoding: null,                // keep response body as raw buffer
            resolveWithFullResponse: true, 
            simple: false                  // do not fail in case of status code != 200
        };
        
        var promise = xfs.mkdir(parentDirPath)
            .then(function (file) {
                return rp(request);
            }).then(function (response) {
                if (response.statusCode === 200) {
                    return xfs.writeFile(localPath + '.zip', response.body);
                } else if (response.statusCode === 404) {
                    return Promise.resolve(); // there's no baseline yet
                } else {
                    console.error(response);
                    return Promise.reject(response);
                }
            }).then(function (file) {
                if (file && file.$isFile) {
                    return Zip.extract(localPath + '.zip', path.dirname(localPath));
                }
            });

        return promise;        
    }
    
}

module.exports = Client;
