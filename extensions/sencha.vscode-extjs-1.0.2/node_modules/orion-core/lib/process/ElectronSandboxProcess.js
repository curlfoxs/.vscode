'use strict';

const SandboxProcess = require('./SandboxProcess');
const path = require('path');

var mainWindow = null,
    showSandbox = false;

class ElectronSandboxProcess extends SandboxProcess {
   
    run (message) {
        var me = this;
        
        var devtoolsPort = message.devtoolsPort;
        var proxyPort = message.proxyPort;
        var url = message.url;
        var preload = path.normalize(__dirname + '/../../sandbox/preload.js');

        const electron = require('electron');
        const BrowserWindow = electron.BrowserWindow;
        const app = me._app = electron.app;

        if (!showSandbox) {
            app.setBadgeCount(0);
            app.dock && app.dock.hide();
        }
        
        // we have cache failures when multiple sandboxes are 
        // executed concurrently since they all try to read/write
        // from/to the same place
        app.commandLine.appendSwitch('disable-http-cache');
        if (devtoolsPort) {
            app.commandLine.appendSwitch('remote-debugging-port', devtoolsPort.toString());
        }
        
        app.on('window-all-closed', function () {
            if (process.platform != 'darwin') {
                app.quit();
            }
        });
        
        var onReady = function () {
            mainWindow = new BrowserWindow({
                title: 'Sencha Test Sandbox',
                show: showSandbox,
                webPreferences: {
                    preload: preload
                }
            });

            if (showSandbox) {
                mainWindow.openDevTools();
            }
            
            me.send('sandboxCreated');
            mainWindow.loadURL(url);

            mainWindow.on('ready-to-show', function () {
                me.send('sandboxReady');
            });
        
            mainWindow.on('closed', function () {
                me.send('sandboxClosed');
                mainWindow = null;
                process.exit(0);
            });
        };

        if (app.isReady()) {
            onReady();
        } else {
            app.disableHardwareAcceleration();
            app.on('ready', onReady);
        }
    }
    
    terminate () {
        super.terminate();
        this._app.quit();
        this.send('sandboxTerminated');
    }
    
}

module.exports = ElectronSandboxProcess;
