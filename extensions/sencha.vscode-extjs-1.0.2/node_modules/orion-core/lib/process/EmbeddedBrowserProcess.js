'use strict';

const Base = require('orion-core/lib/Base');

const allowedMessages = {
    run: 1,
    screenshot: 1
}

class EmbeddedBrowserProcess extends Base {
    
    ctor () {
        var me = this;
        
        process.on('message', function (message) {
            var type = message.type;
            process.send('Received ' + type);
            if (allowedMessages[type]) {
                me[type](message);
            } else {
                console.error('Invalid message received: ' + type);
            }
        });
        
        var keepalive = setInterval(function () {
            if (me._terminated) {
                clearInterval(keepalive);
            }
        }, 1000);
    }
    
    send (m) {
        // log should only happen when running a detached
        // sandbox for internal debugging purposes
        process.send ? process.send(m) : console.log(m);
    }
    
    terminate () {
        this._terminated = true;
    }
    
    run (message) {
        const electron = require('electron');
        const app = electron.app;
        const BrowserWindow = electron.BrowserWindow;
        const argv = process.argv;
        
        var me = this;
        var mainWindow = null;
        var url = message.url;
        var show = message.show;
        var width = message.width || 1024;
        var height = message.height || 768;
        var port = message.proxyPort;
        
        
        //         mainWindow.capturePage(function (image) {
        //             process.send({
        //                 type: 'screenshot',
        //                 screenshot: image.toDataURL()  
        //             });
        //         });
        
        app.on('window-all-closed', function () {
            if (process.platform != 'darwin') {
                app.quit();
            }
        });
        
        
        var onReady = function () {
            mainWindow = new BrowserWindow({
                title: 'Sencha Test - Chromium',
                width: width,
                height: height
            });
            
            mainWindow.openDevTools();
            mainWindow.loadURL(url);
            me.send('windowLoaded');
        
            mainWindow.on('closed', function () {
                me.send('windowClosed');
                mainWindow = null;
                process.exit(0);
            });
        }

        if (app.isReady()) {
            onReady();
        } else {
            app.on('ready', onReady);
        }
    }
    
}

module.exports = EmbeddedBrowserProcess;


